####
####  GENERATE SOME FAKE EFFECT SIZES
####
effects <- c("Mean Rank Shift","Evenness Diff.","Richness Diff.","Species Diff.")
sizes_by_year <- c(0.1, 0.8, 0.01, 0.01,
0.3, 0.6, 0.01, 0.03,
0.5, 0.4, 0.1, 0.01,
0.8, 0.2, 0.1, 0.01,
0.5, 0.01, 0.2, 0.3)
years <- 1:(length(sizes_by_year)/length(effects))
plot_df <- data.frame(effect = rep(effects, length(years)),
year = rep(years, each = length(effects)),
effect_size = sizes_by_year)
plot_df <- plot_df %>%
arrange(year, -effect_size)
####
####   MAKE A PLOT, PANELS FOR EACH YEAR
####
ggplot(plot_df, aes(x = year, y = effect_size, group = as.factor(effect), color = as.factor(effect)))+
geom_line()+
geom_point(size = 2)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root <- "~/Repos/bison_forecast/"
cmip <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
wether_files <- read.file(cmip)
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
wether_files <- read.files(cmip)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root <- "~/Repos/bison_forecast/"
cmip <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
wether_files <- list.files(cmip)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- list.files(cmip)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- list.files(cmip_dir)
head(weather_files)
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- as.data.frame(list.files(cmip_dir))
weather_files
weather_files <- as.data.frame(list.files(cmip_dir)) %>%
dplyr::rename(`list.files(cmip_dir)` = fname)
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse)
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- as.data.frame(list.files(cmip_dir)) %>%
dplyr::rename(`list.files(cmip_dir)` = fname)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse)
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- as.data.frame(list.files(cmip_dir)) %>%
dplyr::rename(fname = `list.files(cmip_dir)`)
head(weather_files)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse)
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- as.data.frame(list.files(cmip_dir)) %>%
dplyr::rename(fname = `list.files(cmip_dir)`) %>%
separate(fname, into = c("source", "variable", "rcp", "model", "bias"), sep = "_")
head(weather_files)
################################################################################
##  predict_swe.R: R script to predict SWE at West Yellowstone SNOTEL using the
##  algorithm from Tercek et al. 2016, PLoS One.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##                Mike Tercek
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root      <- "~/Repos/bison_forecast/"
cmip_dir  <- paste0(root, "data/tercek_data/bias_corrected_daily_t_and_p")
calib_dir <- paste0(root, "data/tercek_data/")
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse)
####
####  DEFINE FUNCTIONS FOR PREDICTING SWE --------------------------------------
####
sim_snow_for_one_water_year <- function(tavg, precip, melt_factor, melt_thresh_temperature){
todays_snow <- 0 # start on October 1
snow_vector <- numeric(length(tavg))
for(i in 1:length(tavg)){
if(is.na(tavg[i]) == FALSE){
todays_snow <- melt_one_day(todays_snow,tavg[i],melt_factor, melt_thresh_temperature)
todays_snow <- accum_one_day(todays_snow,tavg[i],precip[i],melt_factor, melt_thresh_temperature)
snow_list[i] <- todays_snow
}
}
return(snow_vector)
}
melt_one_day <- function(start_swe, tavg, melt_factor, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
return(start_swe)
}else{
swe_delta <-  (tavg - melt_thresh_temperature) * melt_factor
end_swe <- max(0, start_swe - swe_delta)
return(end_swe)
}
}
accum_one_day <- function(start_swe, tavg, precip, precip_fraction, melt_thresh_temperature){
if(tavg <= melt_thresh_temperature){
rain <- 0.0
}else if(tavg > (melt_thresh_temperature + 6)){
rain <- 1.0
}else{
rain <- precip_fraction * (tavg - melt_thresh_temperature)
}
snow_increment <- max(0, (1.0 - rain) * precip)
end_swe <- start_swe + snow_increment
return(end_swe)
}
####
####  READ IN CMIP5 WEATHER PROJECTIONS ----------------------------------------
####
weather_files <- as.data.frame(list.files(cmip_dir)) %>%
dplyr::rename(fname = `list.files(cmip_dir)`) %>%
dplyr::mutate(fnamesep = fname) %>%
separate(fnamesep, into = c("source", "variable", "rcp", "model", "biassep"), sep = "_") %>%
separate(biassep, into = c("bias", "filetype"), sep = "[.]")
head(weather_files)
