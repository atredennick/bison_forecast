}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = sd_proc, E = E[t])
forecasts[,t] <- z
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
##  For presentations
my_cols <- c("#EB6C26", "#D5DD7F", "#408CAD","grey")
tmpvar <- var_rel_preds
colnames(tmpvar) <- c("AvarIPDE", "BvarIPD", "CvarIP", "DvarI", "x")
var2 <- tmpvar %>%
gather(simtype, variance, -x)
ggplot(var2, aes(x=x, fill = simtype))+
geom_ribbon(aes(ymin=0, ymax=variance), color = "black")+
ylab("Percentage of total variance (%)")+
xlab("Forecast steps")+
scale_fill_manual(values = my_cols, name = NULL,
labels = c("Process error", "Driver uncertainty", "Parameter uncertainty", "Initial conditions"))+
scale_x_continuous(breaks=seq(2,forecast_steps,by=2),
labels=paste(seq(2,forecast_steps,by=2), "yrs"),
expand = c(0, 0))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"),
expand = c(0, 0))+
theme_few()
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc, E) {
xnow[xnow>5] <- 5
# Log integration of extractions
e <- log( abs( 1 - (E / Nnow ) ) )
# Determinstic process; log scale
mu <- log(Nnow) + e + r + b*(log(Nnow) + e) + b1*xnow
# Stochastic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc)
# Back-transform to arithmetic scale
N <- exp(zlog)
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[6,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
xsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = sd_proc, E = E[t])
forecasts[,t] <- z
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
##  For presentations
my_cols <- c("#EB6C26", "#D5DD7F", "#408CAD","grey")
tmpvar <- var_rel_preds
colnames(tmpvar) <- c("AvarIPDE", "BvarIPD", "CvarIP", "DvarI", "x")
var2 <- tmpvar %>%
gather(simtype, variance, -x)
ggplot(var2, aes(x=x, fill = simtype))+
geom_ribbon(aes(ymin=0, ymax=variance), color = "black")+
ylab("Percentage of total variance (%)")+
xlab("Forecast steps")+
scale_fill_manual(values = my_cols, name = NULL,
labels = c("Process error", "Driver uncertainty", "Parameter uncertainty", "Initial conditions"))+
scale_x_continuous(breaks=seq(2,forecast_steps,by=2),
labels=paste(seq(2,forecast_steps,by=2), "yrs"),
expand = c(0, 0))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"),
expand = c(0, 0))+
theme_few()
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc, E) {
xnow[xnow>5] <- 5
# Log integration of extractions
e <- log( abs( 1 - (E / Nnow ) ) )
# Determinstic process; log scale
mu <- log(Nnow) + e + r + b*(log(Nnow) + e) + b1*xnow
# Stochastic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc)
# Back-transform to arithmetic scale
N <- exp(zlog)
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[6,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
xsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = sd_proc, E = E[t])
forecasts[,t] <- z
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
##  For presentations
my_cols <- c("#EB6C26", "#D5DD7F", "#408CAD","grey")
tmpvar <- var_rel_preds
colnames(tmpvar) <- c("AvarIPDE", "BvarIPD", "CvarIP", "DvarI", "x")
var2 <- tmpvar %>%
gather(simtype, variance, -x)
ggplot(var2, aes(x=x, fill = simtype))+
geom_ribbon(aes(ymin=0, ymax=variance), color = "black")+
ylab("Percentage of total variance (%)")+
xlab("Forecast steps")+
scale_fill_manual(values = my_cols, name = NULL,
labels = c("Process error", "Driver uncertainty", "Parameter uncertainty", "Initial conditions"))+
scale_x_continuous(breaks=seq(2,forecast_steps,by=2),
labels=paste(seq(2,forecast_steps,by=2), "yrs"),
expand = c(0, 0))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"),
expand = c(0, 0))+
theme_few()
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc, E) {
xnow[xnow>5] <- 5
# Log integration of extractions
e <- log( abs( 1 - (E / Nnow ) ) )
# Determinstic process; log scale
mu <- log(Nnow) + e + r + b*(log(Nnow) + e) + b1*xnow
# Stochastic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc)
# Back-transform to arithmetic scale
N <- exp(zlog)
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[6,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
xsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = sd_proc, E = E[t])
forecasts[,t] <- z
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
##  For presentations
my_cols <- c("#EB6C26", "#D5DD7F", "#408CAD","grey")
tmpvar <- var_rel_preds
colnames(tmpvar) <- c("AvarIPDE", "BvarIPD", "CvarIP", "DvarI", "x")
var2 <- tmpvar %>%
gather(simtype, variance, -x)
ggplot(var2, aes(x=x, fill = simtype))+
geom_ribbon(aes(ymin=0, ymax=variance), color = "black")+
ylab("Percentage of total variance (%)")+
xlab("Forecast steps")+
scale_fill_manual(values = my_cols, name = NULL,
labels = c("Process error", "Driver uncertainty", "Parameter uncertainty", "Initial conditions"))+
scale_x_continuous(breaks=seq(2,forecast_steps,by=2),
labels=paste(seq(2,forecast_steps,by=2), "yrs"),
expand = c(0, 0))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"),
expand = c(0, 0))+
theme_few()
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc, E) {
xnow[xnow>5] <- 5
# Log integration of extractions
e <- log( abs( 1 - (E / Nnow ) ) )
# Determinstic process; log scale
mu <- log(Nnow) + e + r + b*(log(Nnow) + e) + b1*xnow
# Stochastic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc)
# Back-transform to arithmetic scale
N <- exp(zlog)
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[6,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
forecast_steps <- 7
num_iters      <- 500000
E              <- validation_dat$wint.removal
z              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = x[t], r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
xsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = 0, E = E[t])
forecasts[,t] <- z
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
z              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[7,3]
x              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
z <- iterate_process(Nnow = z, xnow = as.numeric(x[t,xsamps]), r, b, b1, sd_proc = sd_proc, E = E[t])
forecasts[,t] <- z
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
##  For presentations
my_cols <- c("#EB6C26", "#D5DD7F", "#408CAD","grey")
tmpvar <- var_rel_preds
colnames(tmpvar) <- c("AvarIPDE", "BvarIPD", "CvarIP", "DvarI", "x")
var2 <- tmpvar %>%
gather(simtype, variance, -x)
ggplot(var2, aes(x=x, fill = simtype))+
geom_ribbon(aes(ymin=0, ymax=variance), color = "black")+
ylab("Percentage of total variance (%)")+
xlab("Forecast steps")+
scale_fill_manual(values = my_cols, name = NULL,
labels = c("Process error", "Driver uncertainty", "Parameter uncertainty", "Initial conditions"))+
scale_x_continuous(breaks=seq(2,forecast_steps,by=2),
labels=paste(seq(2,forecast_steps,by=2), "yrs"),
expand = c(0, 0))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"),
expand = c(0, 0))+
theme_few()
